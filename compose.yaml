# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  core_service:
    build:
      context: ./ar.edu.uade.core
    image: matiasfelau/core-image
    env_file:
      - .env
    container_name: core-container
    volumes:
      - core_data:/core_data
    ports:
      - 8000:8000
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672 # Puerto para RabbitMQ (AMQP)
      - 15672:15672 # Puerto para la interfaz de administraci√≥n (opcional)
      - 15692:15692
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000 # Puerto Grafana
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    environment:
      RABBITMQ_URL: http://rabbitmq:15672/
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
    ports:
      - 9419:9419 # RabbitMQ Exporter para Prometheus

volumes:
  core_data:
  grafana_data:
  prometheus_data:
  rabbitmq_data:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

